<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deep Learning | Metehan Cekic</title>
    <link>https://www.ece.ucsb.edu/~metehancekic/categories/deep-learning/</link>
      <atom:link href="https://www.ece.ucsb.edu/~metehancekic/categories/deep-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>Deep Learning</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 03 May 2020 13:36:47 -0700</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Deep Learning</title>
      <link>https://www.ece.ucsb.edu/~metehancekic/categories/deep-learning/</link>
    </image>
    
    <item>
      <title>Deep Illusion (Adversarial ML toolbox)</title>
      <link>https://www.ece.ucsb.edu/~metehancekic/project/deep-illusion/</link>
      <pubDate>Sun, 03 May 2020 13:36:47 -0700</pubDate>
      <guid>https://www.ece.ucsb.edu/~metehancekic/project/deep-illusion/</guid>
      <description>&lt;br/&gt;
&lt;h1 id=&#34;adversarial-machine-learning&#34;&gt;Adversarial Machine Learning&lt;/h1&gt;
&lt;p&gt;With the advent of more powerful parallel computation units and huge data, we are able to train much more complex and expressive deep neural networks. That is said, deep neural nets (DNN) found its use in a wide variety of fields, ranging from computer vision to game playing agents. They are performing better on some tasks than even human experts in those fields. Despite their incredible success, it is by now well known that they are susceptible to small and carefully designed perturbations which are imperceptible to humans. The fact that DNN&amp;rsquo;s can easily be fooled is a great problem since they are also used in security critical applications such as self-driving cars. Recently, research community has put a great effort to robustify neural networks against these adversarial examples. Despite great attention of research community, there is not a powerful defense mechanism found, and it is shown that defending against adversarial examples are not an easy goal.&lt;/p&gt;
&lt;p&gt;As another group working on this field, we share our attack codes as a library. This library is a side product of our research, and since we use this in our research as well, we made sure it works correctly and as mentioned in the original papers. To sum up, deepillusion contains easy to use and properly implemented adversarial methods.&lt;/p&gt;
&lt;p&gt;We are open to suggestions &amp;ldquo;&lt;a href=&#34;mailto:metehancekic@ucsb.edu&#34;&gt;metehancekic@ucsb.edu&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;h1 id=&#34;deep-illusion-&#34;&gt;Deep Illusion&lt;/h1&gt;
&lt;p&gt;Deep Illusion is a toolbox for adversarial attacks in machine learning. Current version is only implemented for Pytorch models. DeepIllusion is a growing and developing python module which aims to help adversarial machine learning community to accelerate their research. Module currently includes complete implementation of well-known attacks (PGD, FGSM, R-FGSM, CW, BIM etc..). All attacks have an apex(amp) version which you can run your attacks fast and accurately. We strongly recommend that amp versions should only be used for adversarial training since it may have gradient masking issues after neural net gets confident about its decisions. All attack methods have an option (Verbose: False) to check if gradient masking is happening.&lt;/p&gt;
&lt;p&gt;All attack codes are written in functional programming style, therefore, users can easily call the method function and feed the input data and model to get perturbations. All codes are documented, and contains the example use in their description. Users can easily access the documentation by typing &amp;ldquo;??&amp;rdquo; at the and of the method they want to use in Ipython (E.g FGSM?? or PGD??). Output perturbations are already clipped for each image to prevent illegal pixel values. We are open to contributers to expand the attack methods arsenal.&lt;/p&gt;
&lt;p&gt;We also include the most effective current approach to defend DNNs against adversarial perturbations which is training the network using adversarially perturbed examples. Adversarial training and testing methods are included in torchdefenses submodule.&lt;/p&gt;
&lt;p&gt;Current version is tested with different defense methods and the standard models for verification and we observed the reported accuracies.&lt;/p&gt;
&lt;p&gt;Code can be installed via PyPi:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install deepillusion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maintainers:

&lt;a href=&#34;https://wcsl.ece.ucsb.edu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WCSL Lab&lt;/a&gt;,

&lt;a href=&#34;https://www.ece.ucsb.edu/~metehancekic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Metehan Cekic&lt;/a&gt;,

&lt;a href=&#34;https://wcsl.ece.ucsb.edu/people/can-bakiskan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Can Bakiskan&lt;/a&gt;,

&lt;a href=&#34;https://wcsl.ece.ucsb.edu/people/soorya-gopalakrishnan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Soorya Gopal&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dependencies-&#34;&gt;Dependencies&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;numpy                     1.16.4&lt;br&gt;
tqdm                      4.31.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;torchattacks&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pytorch                   1.4.0&lt;br&gt;
apex                      0.1  (optional)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;tfattacks&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tensorflow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;jaxattacks&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;installation-&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The most recent stable version can be installed via python package installer &amp;ldquo;pip&amp;rdquo;, or you can clone it from the git page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install deepillusion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:metehancekic/deep-illusion.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-use-&#34;&gt;Example Use&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, our adversarial methods are functional instead of modular type. Therefore, all you need to get the perturbations is feeding input data and its labels along with the attack parameters.&lt;/p&gt;
&lt;p&gt;To standardize the arguments for all attacks, methods accept attack parameters as a dictionary named as attack_params which contains the necessary parameters for each attack. Furthermore, attack methods get the data properties such as the maximum and the minimum pixel value as another dictionary named data_params. These dictinaries make function calls concise and standard for all methods.&lt;/p&gt;
&lt;p&gt;Following code snippets show PGD and FGSM usage.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from deepillusion.torchattacks import PGD, FGSM, RFGSM

##### PGD ######
data_params = {&amp;quot;x_min&amp;quot;: 0., &amp;quot;x_max&amp;quot;: 1.}
attack_params = {
    &amp;quot;norm&amp;quot;: &amp;quot;inf&amp;quot;,
    &amp;quot;eps&amp;quot;: 8./255,
    &amp;quot;step_size&amp;quot;: 2./255,
    &amp;quot;num_steps&amp;quot;: 7,
    &amp;quot;random_start&amp;quot;: False,
    &amp;quot;num_restarts&amp;quot;: 1}
    
pgd_args = dict(net=model,
                x=data,
                y_true=target,
                data_params=data_params,
                attack_params=attack_params,
                verbose=False,
                progress_bar=False)               
perturbs = PGD(**pgd_args)
data_adversarial = data + perturbs

##### FGSM #####
data_params = {&amp;quot;x_min&amp;quot;: 0., &amp;quot;x_max&amp;quot;: 1.}
attack_params = {&amp;quot;norm&amp;quot;: &amp;quot;inf&amp;quot;,
                 &amp;quot;eps&amp;quot;: 8./255}
fgsm_args = dict(net=model,
                 x=data,
                 y_true=target,
                 data_params=data_params,
                 attack_params=attack_params)
perturbs = FGSM(**fgsm_args)
data_adversarial = data + perturbs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-&#34;&gt;Update&lt;/h2&gt;
&lt;p&gt;Deepillusion is a growing and developing library, therefore we strongly recommend to upgrade deepillusion regularly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install deepillusion --upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;current-version-&#34;&gt;Current Version&lt;/h2&gt;
&lt;p&gt;0.1.9&lt;/p&gt;
&lt;h2 id=&#34;module-structure-&#34;&gt;Module Structure&lt;/h2&gt;
&lt;p&gt;In case investigation of the source codes are needed, this is how our module is structured:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deep-illusion
│   README.md
│
|───deepillusion
|   |   _utils.py               Utility functions
|   |
|   |───torchattacks
|   |   │   _fgsm.py                     Fast Gradient Sign Method
|   |   │   _rfgsm.py                    Random Start + Fast Gradient Sign Method
|   |   │   _pgd.py                      Projected Gradient Descent
|   |   │   _cw.py                       Carlini Wagner Linf
|   |   │   _bim.py                      Basic Iterative Method
|   |   │   _soft_attacks.py             Soft attack functions
|   |   │ 
|   |   |───amp
|   |   |   │   _fgsm.py                     Mixed Precision (Faster) - Fast Gradient Sign Method
|   |   |   │   _rfgsm.py                    MP - Random Start + Fast Gradient Sign Method
|   |   |   │   _cw.py                       MP - Carlini Wagner Linf
|   |   |   │   _pgd.py                      MP - Projected Gradient Descent
|   |   |   |   _soft_attacks.py             MP - Soft attack functions
|   |   |
|   |   └───analysis
|   |       │   _perturbation_statistics     Perturbations statistics functions
|   |
|   |───torchdefenses
│   |   |   _adversarial_train_test.py       Adversarial Training - Adversarial Testing
|   |   │   
|   |   └───amp
|   |       │   _adversarial_train_test.py     MP (Faster) - Adversarial Training - Adversarial Testing 
|   |
|   |───tfattacks
|   |   |
|   |
|   └───jaxattacks
|       |
|
└───tests
    |   fgsm_test.py
    |   fgsmt_test.py
    |   pgd_test.py
    |   bim_test.py
    |   rfgsm_test.py
    |   cw_test.py
    |   test_utils.py

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sources-&#34;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://pypi.org/project/deepillusion/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PyPi page for the code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/metehancekic/deep-illusion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git repo for the code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sparsifying Front Ends</title>
      <link>https://www.ece.ucsb.edu/~metehancekic/project/adversarial-machine-learning/</link>
      <pubDate>Thu, 05 Mar 2020 15:01:28 -0800</pubDate>
      <guid>https://www.ece.ucsb.edu/~metehancekic/project/adversarial-machine-learning/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Radio Frequency Machine Learning (RFML)</title>
      <link>https://www.ece.ucsb.edu/~metehancekic/project/mywireless-fingerprinting/</link>
      <pubDate>Tue, 25 Feb 2020 14:49:34 -0800</pubDate>
      <guid>https://www.ece.ucsb.edu/~metehancekic/project/mywireless-fingerprinting/</guid>
      <description>&lt;h2 id=&#34;radio-frequency-machine-learning-&#34;&gt;&lt;strong&gt;Radio Frequency Machine Learning&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;Our goal is to learn&amp;nbsp;&lt;strong&gt;&lt;em&gt;RF signatures&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;that can distinguish between devices sending&amp;nbsp;&lt;em&gt;exactly&lt;/em&gt;&amp;nbsp;the same message. This is possible due to subtle hardware imperfections (labeled&amp;nbsp;&#34;nonlinearities&#34; in the figure below) unique to each device.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;Simply Easy Learning&#34; width=&#34;600&#34;
height=&#34;240&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Since the information in RF data resides in complex baseband, we employ CNNs with complex-valued weights to learn these signatures. This technique&amp;nbsp;does&amp;nbsp;not use&amp;nbsp;signal domain knowledge and can be used for any wireless protocol. We demonstrate its effectiveness for two protocols -&amp;nbsp;WiFi and ADS-B.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;architect.png&#34; alt=&#34;Simply Easy Learning&#34; width=&#34;600&#34;
height=&#34;240&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We show that this&amp;nbsp;approach is vulnerable to spoofing&amp;nbsp;when using&amp;nbsp;the entire packet:&amp;nbsp;the CNN focuses on&amp;nbsp;fields containing ID info (eg. MAC ID in WiFi) which can be easily spoofed. When using the preamble alone, reasonably high accuracies are obtained, and performance is significantly enhanced by noise augmentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;We also study robustness to confounding factors&amp;nbsp;in data collected over multiple days and locations, such as the carrier frequency offset (CFO), which drifts over time, and the wireless channel, which depends on the propagation environment. We show that carefully designed data augmentation is critical for learning robust wireless signatures.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;&amp;nbsp;&lt;/small&gt;&lt;/p&gt;
&lt;div class=&#34;field__item odd&#34;&gt;&lt;div class=&#34;entity entity-paragraphs-item paragraphs-item-related-publications-topic-group&#34;&gt;
  &lt;div class=&#34;content&#34;&gt;
    &lt;div class=&#34;field field--name-field-sub-topic-title field--type-text field--label-hidden&#34;&gt;&lt;div class=&#34;field__items&#34;&gt;&lt;div class=&#34;field__item even&#34;&gt;&lt;h3 class=&#34;&#34;&gt;Publications&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;field field--name-field-related-publications field--type-entityreference field--label-hidden&#34;&gt;&lt;div class=&#34;field__items&#34;&gt;&lt;div class=&#34;field__item even&#34;&gt;	&lt;div role=&#34;article&#34; class=&#34;node node--simple-publication node--promoted contextual-links-region node--citation node--simple-publication--citation&#34;&gt;
	  &lt;div class=&#34;node__content&#34;&gt;
	    &lt;div class=&#34;field citation&#34;&gt; &lt;b&gt;Metehan Cekic*&lt;/b&gt;,&amp;nbsp;Soorya Gopalakrishnan*,&amp;nbsp;Upamanyu Madhow, &#34;&lt;a href=&#34;https://web.ece.ucsb.edu/~metehancekic/publication/cekic-2020-robust/&#34; target=&#34;_self&#34;&gt;Robust Wireless Fingerprinting: Generalizing Across Space and Time&lt;/a&gt;&#34;, arXiv:2002.10791.
&lt;br/&gt;
&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;field field--name-field-related-publications field--type-entityreference field--label-hidden&#34;&gt;&lt;div class=&#34;field__items&#34;&gt;&lt;div class=&#34;field__item even&#34;&gt;	&lt;div role=&#34;article&#34; class=&#34;node node--simple-publication node--promoted contextual-links-region node--citation node--simple-publication--citation&#34;&gt;
	  &lt;div class=&#34;node__content&#34;&gt;
	    &lt;div class=&#34;field citation&#34;&gt;Soorya Gopalakrishnan*, &lt;b&gt; Metehan Cekic* &lt;/b&gt;,&amp;nbsp;Upamanyu Madhow, &#34;&lt;a href=&#34;https://www.ece.ucsb.edu/~metehancekic/publication/fingerprinting-2019-globecom/&#34; target=&#34;_self&#34;&gt;Robust Wireless Fingerprinting via Complex-Valued Neural Networks&lt;/a&gt;&#34;, &lt;i&gt;IEEE Global Communications Conference (Globecom)&lt;/i&gt;,&amp;nbsp;Waikoloa, Hawaii, Dec. 2019. 
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
